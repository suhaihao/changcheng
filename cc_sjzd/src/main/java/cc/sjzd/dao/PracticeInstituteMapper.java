package cc.sjzd.dao;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

import cc.sjzd.entity.PracticeInstitute;

import org.apache.ibatis.annotations.Many;

public interface PracticeInstituteMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table practice_institute
     *
     * @mbg.generated Wed Apr 01 10:01:13 CST 2020
     */
    @Delete({
        "delete from practice_institute",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table practice_institute
     *
     * @mbg.generated Wed Apr 01 10:01:13 CST 2020
     */
    @Insert({
        "insert into practice_institute (institute_name, ",
        "create_time, address, ",
        "manager, phone, ",
        "intro, type_id, center_id, ",
        "imgs)",
        "values (#{instituteName,jdbcType=VARCHAR}, ",
        "#{createTime,jdbcType=DATE}, #{address,jdbcType=VARCHAR}, ",
        "#{manager,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, ",
        "#{intro,jdbcType=VARCHAR}, #{typeId,jdbcType=INTEGER}, #{centerId,jdbcType=INTEGER}, ",
        "#{imgs,jdbcType=LONGVARCHAR})"
    })
    int insert(PracticeInstitute record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table practice_institute
     *
     * @mbg.generated Wed Apr 01 10:01:13 CST 2020
     */
    @InsertProvider(type=PracticeInstituteSqlProvider.class, method="insertSelective")
    int insertSelective(PracticeInstitute record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table practice_institute
     *
     * @mbg.generated Wed Apr 01 10:01:13 CST 2020
     */
    @Select({
        "select",
        "id, institute_name, create_time, address, manager, phone, intro, type_id, center_id, ",
        "imgs",
        "from practice_institute",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results(id="instituteMap",value={
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="institute_name", property="instituteName", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.DATE),
        @Result(column="address", property="address", jdbcType=JdbcType.VARCHAR),
        @Result(column="manager", property="manager", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone", property="phone", jdbcType=JdbcType.VARCHAR),
        @Result(column="intro", property="intro", jdbcType=JdbcType.VARCHAR),
        @Result(column="type_id", property="typeId", jdbcType=JdbcType.INTEGER),
        @Result(column="center_id", property="centerId", jdbcType=JdbcType.INTEGER),
        @Result(column="imgs", property="imgs", jdbcType=JdbcType.LONGVARCHAR),
        @Result(property="stations",javaType=List.class,column="id",
    		many=@Many(select="cc.sjzd.dao.PracticeStationMapper.selectByInstituteId")) 
    })
    PracticeInstitute selectByPrimaryKey(Integer id); 

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table practice_institute
     *
     * @mbg.generated Wed Apr 01 10:01:13 CST 2020
     */
    @UpdateProvider(type=PracticeInstituteSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(PracticeInstitute record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table practice_institute
     *
     * @mbg.generated Wed Apr 01 10:01:13 CST 2020
     */
    @Update({
        "update practice_institute",
        "set institute_name = #{instituteName,jdbcType=VARCHAR},",
          "create_time = #{createTime,jdbcType=DATE},",
          "address = #{address,jdbcType=VARCHAR},",
          "manager = #{manager,jdbcType=VARCHAR},",
          "phone = #{phone,jdbcType=VARCHAR},",
          "intro = #{intro,jdbcType=VARCHAR},",
          "type_id = #{typeId,jdbcType=INTEGER},",
          "center_id = #{centerId,jdbcType=INTEGER},",
          "imgs = #{imgs,jdbcType=LONGVARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKeyWithBLOBs(PracticeInstitute record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table practice_institute
     *
     * @mbg.generated Wed Apr 01 10:01:13 CST 2020
     */
    @Update({
        "update practice_institute",
        "set institute_name = #{instituteName,jdbcType=VARCHAR},",
          "create_time = #{createTime,jdbcType=DATE},",
          "address = #{address,jdbcType=VARCHAR},",
          "manager = #{manager,jdbcType=VARCHAR},",
          "phone = #{phone,jdbcType=VARCHAR},",
          "intro = #{intro,jdbcType=VARCHAR},",
          "type_id = #{typeId,jdbcType=INTEGER},",
          "center_id = #{centerId,jdbcType=INTEGER}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(PracticeInstitute record);
    
    //查询所有文明实践所的方法  
    @Select({
        "select",
        "id, institute_name, create_time, address, manager, phone, intro, type_id, center_id, ",
        "imgs",
        "from practice_institute"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="institute_name", property="instituteName", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.DATE),
            @Result(column="address", property="address", jdbcType=JdbcType.VARCHAR),
            @Result(column="manager", property="manager", jdbcType=JdbcType.VARCHAR),
            @Result(column="phone", property="phone", jdbcType=JdbcType.VARCHAR),
            @Result(column="intro", property="intro", jdbcType=JdbcType.VARCHAR),
            @Result(column="type_id", property="typeId", jdbcType=JdbcType.INTEGER),
            @Result(column="center_id", property="centerId", jdbcType=JdbcType.INTEGER),
            @Result(column="imgs", property="imgs", jdbcType=JdbcType.LONGVARCHAR),    
    })
    List<PracticeInstitute> selectAll();
   
    
    //根据名称模糊查询
    @Select({
        "select",
        "id, institute_name, create_time, address, manager, phone, intro, type_id, center_id, ",
        "imgs",
        "from practice_institute",
        "where institute_name LIKE concat ('%', #{name},'%')"
    })
    @ResultMap("instituteMap")
    List<PracticeInstitute> selectByInstituteName(String name);
    
    //根据center_id 查询所有的信息
    @Select({
        "select",
        "id, institute_name, create_time, address, manager, phone, intro, type_id, center_id, ",
        "imgs",
        "from practice_institute",
        "where center_id = #{center_id,jdbcType=INTEGER}"
    })
    @ResultMap("instituteMap")
    List<PracticeInstitute> selectByCenterId(Integer center_id);
    
}